{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","value","date","_this","checked","handleDate","e","setState","target","handleCheckbox","handleValue","handleClick","_this$state","length","props","add","alert","_this$state2","this","maxDate","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","text","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","activeTasks","map","src_components_Task","key","doneTasks","Fragment","App","counter","handleDelete","Object","toConsumableArray","index","findIndex","splice","handleChangeStatus","forEach","getTime","addTask","prevState","concat","src_components_AddTask","src_components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39f1fad4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n\r\n  state = {\r\n    value: \"\",\r\n    date: this.minDate,\r\n    checked: false,\r\n  };\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked,\r\n    });\r\n  };\r\n\r\n  handleValue = (e) => {\r\n    this.setState({\r\n      value: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const { value, date, checked } = this.state;\r\n    if (value.length > 2) {\r\n      this.props.add(value, checked, date);\r\n      this.setState({\r\n        value: \"\",\r\n        date: this.minDate,\r\n        checked: false,\r\n      });\r\n    } else alert(\"Zadanie musi zawierać co najmniej 3 znaki\");\r\n  };\r\n\r\n  render() {\r\n    const { value, date, checked } = this.state;\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\"; //koniec następnego roku (2024-12-31)\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"form\">\r\n          <h2>Dodaj zadanie do zrobienia:</h2>\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Dodaj zadanie\"\r\n              value={value}\r\n              onChange={this.handleValue}\r\n            />\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={checked}\r\n              id=\"important\"\r\n              onChange={this.handleCheckbox}\r\n            />\r\n            <label htmlFor=\"important\">Priorytet</label>\r\n          </div>\r\n          <label htmlFor=\"date\">Do kiedy zrobić</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"date\"\r\n            value={date}\r\n            min={date}\r\n            max={maxDate}\r\n            onChange={this.handleDate}\r\n          />\r\n          <button onClick={this.handleClick} className=\"btnAddTask\">\r\n            Dodaj zadanie\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\nimport \"./Task.css\";\r\n\r\nconst Task = (props) => {\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  const style = {\r\n    color: \"red\",\r\n  };\r\n\r\n  if (active) {\r\n    return (\r\n      <div className=\"task\">\r\n        <p>\r\n          {<strong style={important ? style : null}>{text}</strong>} - zrobić\r\n          do: {date}\r\n          <button\r\n            onClick={() => props.change(id)}\r\n            className=\"taskBtn taskBtnCheck\"\r\n          >\r\n            &#10003;\r\n          </button>\r\n          <button\r\n            onClick={() => props.delete(id)}\r\n            className=\"taskBtn taskBtnDelete\"\r\n          >\r\n            &#10005;\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n\r\n    return (\r\n      <div className=\"task\">\r\n        <p>\r\n          <strong>{text}</strong>\r\n          <em> - (zrobić do: {date})</em>\r\n          <br />\r\n          Data i godzina wykonania: <span>{finish}</span>\r\n          <button\r\n            onClick={() => props.delete(id)}\r\n            className=\"taskBtn taskBtnDelete\"\r\n          >\r\n            &#10005;\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport \"./TaskList.css\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = (props) => {\r\n  const active = props.tasks.filter((task) => task.active === true);\r\n  const done = props.tasks.filter((task) => task.active !== true);\r\n\r\n  const activeTasks = active.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      change={props.change}\r\n      delete={props.delete}\r\n    />\r\n  ));\r\n\r\n  const doneTasks = done.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      change={props.change}\r\n      delete={props.delete}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div className=\"tasksActive\">\r\n        <h2>Zadania do zrobienia:</h2>\r\n        <div>\r\n          {activeTasks.length < 1 ? (\r\n            <span className=\"emptyTasks\">Brak zadań do wykonania</span>\r\n          ) : (\r\n            activeTasks\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"tasksDone\">\r\n        <h2>\r\n          Zadania wykonane: <em>({doneTasks.length})</em>\r\n        </h2>\r\n        <div>{doneTasks}</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport AddTask from \"./AddTask\";\r\nimport TaskList from \"./TaskList\";\r\n\r\nclass App extends Component {\r\n  counter = 0;\r\n  state = {\r\n    tasks: [],\r\n  };\r\n\r\n  handleDelete = (id) => {\r\n    const tasks = [...this.state.tasks];\r\n    const index = tasks.findIndex((task) => task.id === id);\r\n    tasks.splice(index, 1);\r\n\r\n    this.setState({\r\n      tasks: tasks,\r\n    });\r\n  };\r\n\r\n  handleChangeStatus = (id) => {\r\n    const tasks = [...this.state.tasks];\r\n    tasks.forEach((task) => {\r\n      if (task.id === id) {\r\n        task.active = false;\r\n        task.finishDate = new Date().getTime();\r\n      }\r\n    });\r\n    this.setState({\r\n      tasks: tasks,\r\n    });\r\n  };\r\n\r\n  addTask = (value, important, date) => {\r\n    const task = {\r\n      id: this.counter,\r\n      text: value,\r\n      date: date,\r\n      important: important,\r\n      active: true,\r\n      finishDate: null,\r\n    };\r\n    this.counter++;\r\n    this.setState((prevState) => ({\r\n      tasks: [...prevState.tasks, task],\r\n    }));\r\n    return true;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>TODO APP</h1>\r\n        <AddTask add={this.addTask} />\r\n        <TaskList\r\n          tasks={this.state.tasks}\r\n          change={this.handleChangeStatus}\r\n          delete={this.handleDelete}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}